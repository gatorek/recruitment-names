<?php

namespace App\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class HomeControllerTest extends WebTestCase
{
    public function testIndexPage(): void
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        $this->assertResponseStatusCodeSame(Response::HTTP_OK);
        $this->assertSelectorTextContains('h1', 'Test Symfony!');
        $this->assertSelectorTextContains('.lead', 'Simple test application.');
        $this->assertSelectorTextContains('h5', 'Page information:');
        $this->assertSelectorTextContains('li:contains("Framework:")', 'Framework:');
        $this->assertSelectorTextContains('li:contains("Template Engine:")', 'Template Engine:');
        $this->assertSelectorTextContains('small', 'Page generated by Symfony + Twig');
    }

    public function testIndexPageContainsDate(): void
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        
        // Sprawdź czy data jest wyświetlana w odpowiednim formacie
        $this->assertSelectorExists('li:contains("Date:")');
        
        // Sprawdź czy data zawiera kropki (format d.m.Y)
        $dateElement = $crawler->filter('li:contains("Date:")');
        $this->assertCount(1, $dateElement);
        
        $dateText = $dateElement->text();
        $this->assertStringContainsString('Date:', $dateText);
        $this->assertMatchesRegularExpression('/\d{2}\.\d{2}\.\d{4}/', $dateText);
    }

    public function testIndexPageStructure(): void
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        
        // Sprawdź strukturę HTML
        $this->assertSelectorExists('.container');
        $this->assertSelectorExists('.card');
        $this->assertSelectorExists('.card-header');
        $this->assertSelectorExists('.card-body');
        $this->assertSelectorExists('.card-footer');
        $this->assertSelectorExists('.alert.alert-info');
    }

    public function testIndexPageResponseContent(): void
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        
        // Sprawdź czy odpowiedź zawiera oczekiwane treści
        $response = $client->getResponse();
        $content = $response->getContent();
        
        $this->assertStringContainsString('Test Symfony!', $content);
        $this->assertStringContainsString('Simple test application.', $content);
        $this->assertStringContainsString('Page information:', $content);
        $this->assertStringContainsString('Framework:', $content);
        $this->assertStringContainsString('Template Engine:', $content);
        $this->assertStringContainsString('Page generated by Symfony + Twig', $content);
    }

    public function testIndexPageRoute(): void
    {
        $client = static::createClient();
        $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        
        // Sprawdź czy routing działa poprawnie
        $this->assertRouteSame('home');
    }
}
